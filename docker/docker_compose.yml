version: '3.8'
networks:
  public:
    driver: bridge
    ipam:
     driver: default
     config:
       - subnet: 172.30.0.0/16
    driver_opts:
      com.docker.network.bridge.name: docker_public

  private:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: docker_private
      com.docker.network.bridge.enable_icc: 1
      com.docker.network.bridge.enable_ip_masquerade: 1

services:
  traefik:
    image: registry.docker.libis.be/library/traefik:2.5.3
    container_name: traefik
    restart: unless-stopped
    command:
      - --configFile=/traefik/traefik.yml
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./volumes/traefik/conf:/traefik
      - ./volumes/traefik/logs:/logs
    networks:
      - public
      - private

  virtuoso:
    image: registry.docker.libis.be/library/virtuoso:7.2.5
    hostname: virtuoso
    container_name: virtuoso
    environment:
      SPARQL_UPDATE: 'true'
      DEFAULT_GRAPH: https://abv.libis.be/
    volumes:
      - "./volumes/virtuoso/data/db:/data"
    networks:
      - private
    restart: unless-stopped

  elastic:
    image: elasticsearch:7.14.2
    container_name: elastic
    environment:
      discovery.type: single-node
      http.cors.enabled: 'true'
      http.cors.allow-origin: '*'
      http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      http.cors.allow-credentials: 'true'
    networks:
    - private
    restart: unless-stopped
    volumes:
    - "./volumes/elastic/data:/usr/share/elasticsearch/data"

#  kafka:
#    image: bitnami/kafka
#    volumes:
#      - ./volumes/kafka:/bitnami/kafka
#    networks:
#      - private
#    environment:
#      KAFKA_CONF_FILE: /bitnami/kafka/config/server.properties
#      ALLOW_PLAINTEXT_LISTENER: "yes"

  data-api:
    image: registry.docker.libis.be/archiefpunt/data
    container_name: data.api
    hostname: data.api
    volumes:
      - "./volumes/api/config:/app/config"
      - "./volumes/api/cache:/app/cache"
    networks:
      - private
    restart: unless-stopped
    links:
      - virtuoso:virtuoso
#      - kafka:kafka

  audit-api:
    image: registry.docker.libis.be/archiefpunt/audit
    container_name: audit.api
    hostname: audit.api
    volumes:
      - "./volumes/api/config:/app/config"
      - "./volumes/api/cache:/app/cache"
    networks:
      - private
    restart: unless-stopped
    links:
      - virtuoso:virtuoso
#      - kafka:kafka

  search-api:
    image: registry.docker.libis.be/archiefpunt/search
    hostname: search.api
    deploy:
      replicas: 2
    environment:
      SERVICE_ROLE: search
    volumes:
      - "./volumes/api/config:/app/config"
      - "./volumes/api/cache:/app/cache"
    networks:
      - private
    restart: unless-stopped
    links:
      - elastic:elastic

  browse-api:
    image: registry.docker.libis.be/archiefpunt/search
    hostname: browse.api
    deploy:
      replicas: 2
    environment:
      SERVICE_ROLE: browse
    volumes:
      - "./volumes/api/config:/app/config"
      - "./volumes/api/cache:/app/cache"
    networks:
      - private
    restart: unless-stopped
    links:
      - elastic:elastic


  logic-api:
    image: registry.docker.libis.be/archiefpunt/logic
    container_name: logic.api
    hostname: logic.api
    volumes:
      - "./volumes/api/config:/app/config"
      - "./volumes/api/cache:/app/cache"
    networks:
      - private
    restart: unless-stopped
    links:
      - virtuoso:virtuoso
#      - kafka:kafka

  ping-api:
    image: registry.docker.libis.be/archiefpunt/ping
    container_name: ping.api
    hostname: ping.api
    volumes:
      - "./volumes/api/config:/app/config"
      - "./volumes/api/cache:/app/cache"
    networks:
      - private
    restart: unless-stopped
